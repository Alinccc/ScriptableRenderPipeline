#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.
#endif

${VFXPerPassInclude}
${VFXGeneratedBlockFunction}

#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(uint id : SV_VertexID)
{
	uint index = id / 3;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;
	
	${VFXLoadAttributesOrCull}
	${VFXProcessBlocks}
	
	if (!alive)
		return o;
	
	const float2 kOffsets[] = {
		float2(-0.5f, 	-0.288675129413604736328125f),
		float2(0.0f, 	0.57735025882720947265625f),
		float2(0.5f,	-0.288675129413604736328125f),
	};
	
	const float kUVScale = 0.866025388240814208984375f;
	
	const float2 vOffsets = kOffsets[id % 3];
	o.VFX_VARYING_UV = (vOffsets * kUVScale) + 0.5f;
	
	${VFXLoadSize}
	
	const float4x4 elementToVFX = GetElementToVFXMatrix(axisX,axisY,axisZ,float3(angleX,angleY,angleZ),float3(pivotX,pivotY,pivotZ),size3,position);
	const float3 vPos = mul(elementToVFX,float4(vOffsets,0.0f,1.0f)).xyz;

	o.VFX_VARYING_POSCS = TransformPositionVFXToClip(vPos);
	
	#ifdef VFX_VARYING_NORMAL
	float normalFlip = (size3.x * size3.y * size3.z) < 0 ? -1 : 1;
	o.VFX_VARYING_NORMAL = normalFlip * normalize(TransformDirectionVFXToWorld(normalize(-transpose(elementToVFX)[2].xyz)));
	#endif
	#ifdef VFX_VARYING_TANGENT
	o.VFX_VARYING_TANGENT = normalize(TransformDirectionVFXToWorld(normalize(transpose(elementToVFX)[0].xyz)));
	#endif
	#ifdef VFX_VARYING_BENTFACTORS
	${VFXLoadParameter:{bentNormalFactor}}
	o.VFX_VARYING_BENTFACTORS = vOffsets * bentNormalFactor;
	#endif

	${VFXVertexCommonProcess}
	
	${VFXVertexSetFlipbooksInterpolants}

	${VFXVertexAdditionalProcess}

	return o;
}

${VFXBegin:VFXComputeNormalWS}
#if USE_DOUBLE_SIDED
const float faceMul = frontFace ? 1.0f : -1.0f;
#else
const float faceMul = 1.0f;
#endif
	
float3 normalWS = i.VFX_VARYING_NORMAL * faceMul;
const VFXUVData uvData = GetUVData(i);

#if defined(VFX_VARYING_TANGENT) && (USE_NORMAL_MAP || USE_NORMAL_BENDING)
float3 tangentWS = i.VFX_VARYING_TANGENT;
float3 bitangentWS = cross(i.VFX_VARYING_TANGENT,i.VFX_VARYING_NORMAL);

#if defined(VFX_VARYING_BENTFACTORS) && USE_NORMAL_BENDING	
float3 bentFactors = float3(i.VFX_VARYING_BENTFACTORS.xy,sqrt(1.0f - i.VFX_VARYING_BENTFACTORS.x * i.VFX_VARYING_BENTFACTORS.x * i.VFX_VARYING_BENTFACTORS.y * i.VFX_VARYING_BENTFACTORS.y));
normalWS = normalize(tangentWS * bentFactors.x + bitangentWS * bentFactors.y + normalWS * bentFactors.z);
tangentWS = normalize(cross(normalWS,bitangentWS));
bitangentWS = cross(tangentWS,normalWS);
tangentWS *= faceMul;
#endif

#if USE_NORMAL_MAP
float3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
float3x3 tbn = float3x3(tangentWS,bitangentWS,normalWS);
float normalScale = 1.0f;
#ifdef VFX_VARYING_NORMALSCALE
normalScale = i.VFX_VARYING_NORMALSCALE;
#endif
normalWS = normalize(lerp(normalWS,mul(n,tbn),normalScale));
#endif
#endif
${VFXEnd}

${VFXFragmentCommonFunctions}

